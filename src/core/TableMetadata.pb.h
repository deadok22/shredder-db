// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TableMetadata.proto

#ifndef PROTOBUF_TableMetadata_2eproto__INCLUDED
#define PROTOBUF_TableMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TableMetadata_2eproto();
void protobuf_AssignDesc_TableMetadata_2eproto();
void protobuf_ShutdownFile_TableMetadata_2eproto();

class TableMetaData;
class TableMetaData_AttributeDescription;
class TableMetaData_IndexMetadata;
class TableMetaData_IndexMetadata_KeyInfo;

// ===================================================================

class TableMetaData_AttributeDescription : public ::google::protobuf::Message {
 public:
  TableMetaData_AttributeDescription();
  virtual ~TableMetaData_AttributeDescription();
  
  TableMetaData_AttributeDescription(const TableMetaData_AttributeDescription& from);
  
  inline TableMetaData_AttributeDescription& operator=(const TableMetaData_AttributeDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMetaData_AttributeDescription& default_instance();
  
  void Swap(TableMetaData_AttributeDescription* other);
  
  // implements Message ----------------------------------------------
  
  TableMetaData_AttributeDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMetaData_AttributeDescription& from);
  void MergeFrom(const TableMetaData_AttributeDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 type_name = 2;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 2;
  inline ::google::protobuf::int32 type_name() const;
  inline void set_type_name(::google::protobuf::int32 value);
  
  // optional int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TableMetaData.AttributeDescription)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type_name();
  inline void clear_has_type_name();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 type_name_;
  ::google::protobuf::int32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TableMetadata_2eproto();
  friend void protobuf_AssignDesc_TableMetadata_2eproto();
  friend void protobuf_ShutdownFile_TableMetadata_2eproto();
  
  void InitAsDefaultInstance();
  static TableMetaData_AttributeDescription* default_instance_;
};
// -------------------------------------------------------------------

class TableMetaData_IndexMetadata_KeyInfo : public ::google::protobuf::Message {
 public:
  TableMetaData_IndexMetadata_KeyInfo();
  virtual ~TableMetaData_IndexMetadata_KeyInfo();
  
  TableMetaData_IndexMetadata_KeyInfo(const TableMetaData_IndexMetadata_KeyInfo& from);
  
  inline TableMetaData_IndexMetadata_KeyInfo& operator=(const TableMetaData_IndexMetadata_KeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMetaData_IndexMetadata_KeyInfo& default_instance();
  
  void Swap(TableMetaData_IndexMetadata_KeyInfo* other);
  
  // implements Message ----------------------------------------------
  
  TableMetaData_IndexMetadata_KeyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMetaData_IndexMetadata_KeyInfo& from);
  void MergeFrom(const TableMetaData_IndexMetadata_KeyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool asc = 2;
  inline bool has_asc() const;
  inline void clear_asc();
  static const int kAscFieldNumber = 2;
  inline bool asc() const;
  inline void set_asc(bool value);
  
  // @@protoc_insertion_point(class_scope:TableMetaData.IndexMetadata.KeyInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_asc();
  inline void clear_has_asc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  bool asc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TableMetadata_2eproto();
  friend void protobuf_AssignDesc_TableMetadata_2eproto();
  friend void protobuf_ShutdownFile_TableMetadata_2eproto();
  
  void InitAsDefaultInstance();
  static TableMetaData_IndexMetadata_KeyInfo* default_instance_;
};
// -------------------------------------------------------------------

class TableMetaData_IndexMetadata : public ::google::protobuf::Message {
 public:
  TableMetaData_IndexMetadata();
  virtual ~TableMetaData_IndexMetadata();
  
  TableMetaData_IndexMetadata(const TableMetaData_IndexMetadata& from);
  
  inline TableMetaData_IndexMetadata& operator=(const TableMetaData_IndexMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMetaData_IndexMetadata& default_instance();
  
  void Swap(TableMetaData_IndexMetadata* other);
  
  // implements Message ----------------------------------------------
  
  TableMetaData_IndexMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMetaData_IndexMetadata& from);
  void MergeFrom(const TableMetaData_IndexMetadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TableMetaData_IndexMetadata_KeyInfo KeyInfo;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required bool unique = 3;
  inline bool has_unique() const;
  inline void clear_unique();
  static const int kUniqueFieldNumber = 3;
  inline bool unique() const;
  inline void set_unique(bool value);
  
  // repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 4;
  inline const ::TableMetaData_IndexMetadata_KeyInfo& keys(int index) const;
  inline ::TableMetaData_IndexMetadata_KeyInfo* mutable_keys(int index);
  inline ::TableMetaData_IndexMetadata_KeyInfo* add_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata_KeyInfo >&
      keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata_KeyInfo >*
      mutable_keys();
  
  // @@protoc_insertion_point(class_scope:TableMetaData.IndexMetadata)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_unique();
  inline void clear_has_unique();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 type_;
  bool unique_;
  ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata_KeyInfo > keys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TableMetadata_2eproto();
  friend void protobuf_AssignDesc_TableMetadata_2eproto();
  friend void protobuf_ShutdownFile_TableMetadata_2eproto();
  
  void InitAsDefaultInstance();
  static TableMetaData_IndexMetadata* default_instance_;
};
// -------------------------------------------------------------------

class TableMetaData : public ::google::protobuf::Message {
 public:
  TableMetaData();
  virtual ~TableMetaData();
  
  TableMetaData(const TableMetaData& from);
  
  inline TableMetaData& operator=(const TableMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMetaData& default_instance();
  
  void Swap(TableMetaData* other);
  
  // implements Message ----------------------------------------------
  
  TableMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMetaData& from);
  void MergeFrom(const TableMetaData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TableMetaData_AttributeDescription AttributeDescription;
  typedef TableMetaData_IndexMetadata IndexMetadata;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 record_size = 4;
  inline bool has_record_size() const;
  inline void clear_record_size();
  static const int kRecordSizeFieldNumber = 4;
  inline ::google::protobuf::int32 record_size() const;
  inline void set_record_size(::google::protobuf::int32 value);
  
  // required int32 space_for_bit_mask = 5;
  inline bool has_space_for_bit_mask() const;
  inline void clear_space_for_bit_mask();
  static const int kSpaceForBitMaskFieldNumber = 5;
  inline ::google::protobuf::int32 space_for_bit_mask() const;
  inline void set_space_for_bit_mask(::google::protobuf::int32 value);
  
  // required int32 records_per_page = 6;
  inline bool has_records_per_page() const;
  inline void clear_records_per_page();
  static const int kRecordsPerPageFieldNumber = 6;
  inline ::google::protobuf::int32 records_per_page() const;
  inline void set_records_per_page(::google::protobuf::int32 value);
  
  // repeated .TableMetaData.AttributeDescription attribute = 2;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  inline const ::TableMetaData_AttributeDescription& attribute(int index) const;
  inline ::TableMetaData_AttributeDescription* mutable_attribute(int index);
  inline ::TableMetaData_AttributeDescription* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_AttributeDescription >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_AttributeDescription >*
      mutable_attribute();
  
  // repeated .TableMetaData.IndexMetadata indices = 3;
  inline int indices_size() const;
  inline void clear_indices();
  static const int kIndicesFieldNumber = 3;
  inline const ::TableMetaData_IndexMetadata& indices(int index) const;
  inline ::TableMetaData_IndexMetadata* mutable_indices(int index);
  inline ::TableMetaData_IndexMetadata* add_indices();
  inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata >&
      indices() const;
  inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata >*
      mutable_indices();
  
  // @@protoc_insertion_point(class_scope:TableMetaData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_record_size();
  inline void clear_has_record_size();
  inline void set_has_space_for_bit_mask();
  inline void clear_has_space_for_bit_mask();
  inline void set_has_records_per_page();
  inline void clear_has_records_per_page();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 record_size_;
  ::google::protobuf::int32 space_for_bit_mask_;
  ::google::protobuf::RepeatedPtrField< ::TableMetaData_AttributeDescription > attribute_;
  ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata > indices_;
  ::google::protobuf::int32 records_per_page_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_TableMetadata_2eproto();
  friend void protobuf_AssignDesc_TableMetadata_2eproto();
  friend void protobuf_ShutdownFile_TableMetadata_2eproto();
  
  void InitAsDefaultInstance();
  static TableMetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// TableMetaData_AttributeDescription

// required string name = 1;
inline bool TableMetaData_AttributeDescription::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableMetaData_AttributeDescription::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableMetaData_AttributeDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableMetaData_AttributeDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableMetaData_AttributeDescription::name() const {
  return *name_;
}
inline void TableMetaData_AttributeDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_AttributeDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_AttributeDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMetaData_AttributeDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableMetaData_AttributeDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 type_name = 2;
inline bool TableMetaData_AttributeDescription::has_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableMetaData_AttributeDescription::set_has_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableMetaData_AttributeDescription::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableMetaData_AttributeDescription::clear_type_name() {
  type_name_ = 0;
  clear_has_type_name();
}
inline ::google::protobuf::int32 TableMetaData_AttributeDescription::type_name() const {
  return type_name_;
}
inline void TableMetaData_AttributeDescription::set_type_name(::google::protobuf::int32 value) {
  set_has_type_name();
  type_name_ = value;
}

// optional int32 size = 3;
inline bool TableMetaData_AttributeDescription::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableMetaData_AttributeDescription::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableMetaData_AttributeDescription::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableMetaData_AttributeDescription::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 TableMetaData_AttributeDescription::size() const {
  return size_;
}
inline void TableMetaData_AttributeDescription::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// TableMetaData_IndexMetadata_KeyInfo

// required string name = 1;
inline bool TableMetaData_IndexMetadata_KeyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableMetaData_IndexMetadata_KeyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableMetaData_IndexMetadata_KeyInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableMetaData_IndexMetadata_KeyInfo::name() const {
  return *name_;
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMetaData_IndexMetadata_KeyInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableMetaData_IndexMetadata_KeyInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool asc = 2;
inline bool TableMetaData_IndexMetadata_KeyInfo::has_asc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_has_asc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableMetaData_IndexMetadata_KeyInfo::clear_has_asc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableMetaData_IndexMetadata_KeyInfo::clear_asc() {
  asc_ = false;
  clear_has_asc();
}
inline bool TableMetaData_IndexMetadata_KeyInfo::asc() const {
  return asc_;
}
inline void TableMetaData_IndexMetadata_KeyInfo::set_asc(bool value) {
  set_has_asc();
  asc_ = value;
}

// -------------------------------------------------------------------

// TableMetaData_IndexMetadata

// required string name = 1;
inline bool TableMetaData_IndexMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableMetaData_IndexMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableMetaData_IndexMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableMetaData_IndexMetadata::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableMetaData_IndexMetadata::name() const {
  return *name_;
}
inline void TableMetaData_IndexMetadata::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_IndexMetadata::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData_IndexMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMetaData_IndexMetadata::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableMetaData_IndexMetadata::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 type = 2;
inline bool TableMetaData_IndexMetadata::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableMetaData_IndexMetadata::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableMetaData_IndexMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableMetaData_IndexMetadata::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TableMetaData_IndexMetadata::type() const {
  return type_;
}
inline void TableMetaData_IndexMetadata::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bool unique = 3;
inline bool TableMetaData_IndexMetadata::has_unique() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableMetaData_IndexMetadata::set_has_unique() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableMetaData_IndexMetadata::clear_has_unique() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableMetaData_IndexMetadata::clear_unique() {
  unique_ = false;
  clear_has_unique();
}
inline bool TableMetaData_IndexMetadata::unique() const {
  return unique_;
}
inline void TableMetaData_IndexMetadata::set_unique(bool value) {
  set_has_unique();
  unique_ = value;
}

// repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
inline int TableMetaData_IndexMetadata::keys_size() const {
  return keys_.size();
}
inline void TableMetaData_IndexMetadata::clear_keys() {
  keys_.Clear();
}
inline const ::TableMetaData_IndexMetadata_KeyInfo& TableMetaData_IndexMetadata::keys(int index) const {
  return keys_.Get(index);
}
inline ::TableMetaData_IndexMetadata_KeyInfo* TableMetaData_IndexMetadata::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline ::TableMetaData_IndexMetadata_KeyInfo* TableMetaData_IndexMetadata::add_keys() {
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata_KeyInfo >&
TableMetaData_IndexMetadata::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata_KeyInfo >*
TableMetaData_IndexMetadata::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// TableMetaData

// required string name = 1;
inline bool TableMetaData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableMetaData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableMetaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableMetaData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableMetaData::name() const {
  return *name_;
}
inline void TableMetaData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableMetaData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMetaData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableMetaData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 record_size = 4;
inline bool TableMetaData::has_record_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableMetaData::set_has_record_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableMetaData::clear_has_record_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableMetaData::clear_record_size() {
  record_size_ = 0;
  clear_has_record_size();
}
inline ::google::protobuf::int32 TableMetaData::record_size() const {
  return record_size_;
}
inline void TableMetaData::set_record_size(::google::protobuf::int32 value) {
  set_has_record_size();
  record_size_ = value;
}

// required int32 space_for_bit_mask = 5;
inline bool TableMetaData::has_space_for_bit_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableMetaData::set_has_space_for_bit_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableMetaData::clear_has_space_for_bit_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableMetaData::clear_space_for_bit_mask() {
  space_for_bit_mask_ = 0;
  clear_has_space_for_bit_mask();
}
inline ::google::protobuf::int32 TableMetaData::space_for_bit_mask() const {
  return space_for_bit_mask_;
}
inline void TableMetaData::set_space_for_bit_mask(::google::protobuf::int32 value) {
  set_has_space_for_bit_mask();
  space_for_bit_mask_ = value;
}

// required int32 records_per_page = 6;
inline bool TableMetaData::has_records_per_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableMetaData::set_has_records_per_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableMetaData::clear_has_records_per_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableMetaData::clear_records_per_page() {
  records_per_page_ = 0;
  clear_has_records_per_page();
}
inline ::google::protobuf::int32 TableMetaData::records_per_page() const {
  return records_per_page_;
}
inline void TableMetaData::set_records_per_page(::google::protobuf::int32 value) {
  set_has_records_per_page();
  records_per_page_ = value;
}

// repeated .TableMetaData.AttributeDescription attribute = 2;
inline int TableMetaData::attribute_size() const {
  return attribute_.size();
}
inline void TableMetaData::clear_attribute() {
  attribute_.Clear();
}
inline const ::TableMetaData_AttributeDescription& TableMetaData::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::TableMetaData_AttributeDescription* TableMetaData::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::TableMetaData_AttributeDescription* TableMetaData::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_AttributeDescription >&
TableMetaData::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_AttributeDescription >*
TableMetaData::mutable_attribute() {
  return &attribute_;
}

// repeated .TableMetaData.IndexMetadata indices = 3;
inline int TableMetaData::indices_size() const {
  return indices_.size();
}
inline void TableMetaData::clear_indices() {
  indices_.Clear();
}
inline const ::TableMetaData_IndexMetadata& TableMetaData::indices(int index) const {
  return indices_.Get(index);
}
inline ::TableMetaData_IndexMetadata* TableMetaData::mutable_indices(int index) {
  return indices_.Mutable(index);
}
inline ::TableMetaData_IndexMetadata* TableMetaData::add_indices() {
  return indices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata >&
TableMetaData::indices() const {
  return indices_;
}
inline ::google::protobuf::RepeatedPtrField< ::TableMetaData_IndexMetadata >*
TableMetaData::mutable_indices() {
  return &indices_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TableMetadata_2eproto__INCLUDED
