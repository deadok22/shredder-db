// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TableMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TableMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableMetaData_AttributeDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMetaData_AttributeDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableMetaData_IndexMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMetaData_IndexMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableMetaData_IndexMetadata_KeyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMetaData_IndexMetadata_KeyInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TableMetadata_2eproto() {
  protobuf_AddDesc_TableMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TableMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  TableMetaData_descriptor_ = file->message_type(0);
  static const int TableMetaData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, record_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, space_for_bit_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, records_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, indices_),
  };
  TableMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMetaData_descriptor_,
      TableMetaData::default_instance_,
      TableMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMetaData));
  TableMetaData_AttributeDescription_descriptor_ = TableMetaData_descriptor_->nested_type(0);
  static const int TableMetaData_AttributeDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_AttributeDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_AttributeDescription, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_AttributeDescription, size_),
  };
  TableMetaData_AttributeDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMetaData_AttributeDescription_descriptor_,
      TableMetaData_AttributeDescription::default_instance_,
      TableMetaData_AttributeDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_AttributeDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_AttributeDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMetaData_AttributeDescription));
  TableMetaData_IndexMetadata_descriptor_ = TableMetaData_descriptor_->nested_type(1);
  static const int TableMetaData_IndexMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, unique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, keys_),
  };
  TableMetaData_IndexMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMetaData_IndexMetadata_descriptor_,
      TableMetaData_IndexMetadata::default_instance_,
      TableMetaData_IndexMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMetaData_IndexMetadata));
  TableMetaData_IndexMetadata_KeyInfo_descriptor_ = TableMetaData_IndexMetadata_descriptor_->nested_type(0);
  static const int TableMetaData_IndexMetadata_KeyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata_KeyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata_KeyInfo, asc_),
  };
  TableMetaData_IndexMetadata_KeyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMetaData_IndexMetadata_KeyInfo_descriptor_,
      TableMetaData_IndexMetadata_KeyInfo::default_instance_,
      TableMetaData_IndexMetadata_KeyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata_KeyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMetaData_IndexMetadata_KeyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMetaData_IndexMetadata_KeyInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TableMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMetaData_descriptor_, &TableMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMetaData_AttributeDescription_descriptor_, &TableMetaData_AttributeDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMetaData_IndexMetadata_descriptor_, &TableMetaData_IndexMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMetaData_IndexMetadata_KeyInfo_descriptor_, &TableMetaData_IndexMetadata_KeyInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TableMetadata_2eproto() {
  delete TableMetaData::default_instance_;
  delete TableMetaData_reflection_;
  delete TableMetaData_AttributeDescription::default_instance_;
  delete TableMetaData_AttributeDescription_reflection_;
  delete TableMetaData_IndexMetadata::default_instance_;
  delete TableMetaData_IndexMetadata_reflection_;
  delete TableMetaData_IndexMetadata_KeyInfo::default_instance_;
  delete TableMetaData_IndexMetadata_KeyInfo_reflection_;
}

void protobuf_AddDesc_TableMetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TableMetadata.proto\"\256\003\n\rTableMetaData\022"
    "\014\n\004name\030\001 \002(\t\022\023\n\013record_size\030\004 \002(\005\022\032\n\022sp"
    "ace_for_bit_mask\030\005 \002(\005\022\030\n\020records_per_pa"
    "ge\030\006 \002(\005\0226\n\tattribute\030\002 \003(\0132#.TableMetaD"
    "ata.AttributeDescription\022-\n\007indices\030\003 \003("
    "\0132\034.TableMetaData.IndexMetadata\032E\n\024Attri"
    "buteDescription\022\014\n\004name\030\001 \002(\t\022\021\n\ttype_na"
    "me\030\002 \002(\005\022\014\n\004size\030\003 \001(\005\032\225\001\n\rIndexMetadata"
    "\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\005\022\016\n\006unique\030\003"
    " \002(\010\0222\n\004keys\030\004 \003(\0132$.TableMetaData.Index"
    "Metadata.KeyInfo\032$\n\007KeyInfo\022\014\n\004name\030\001 \002("
    "\t\022\013\n\003asc\030\002 \002(\010", 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TableMetadata.proto", &protobuf_RegisterTypes);
  TableMetaData::default_instance_ = new TableMetaData();
  TableMetaData_AttributeDescription::default_instance_ = new TableMetaData_AttributeDescription();
  TableMetaData_IndexMetadata::default_instance_ = new TableMetaData_IndexMetadata();
  TableMetaData_IndexMetadata_KeyInfo::default_instance_ = new TableMetaData_IndexMetadata_KeyInfo();
  TableMetaData::default_instance_->InitAsDefaultInstance();
  TableMetaData_AttributeDescription::default_instance_->InitAsDefaultInstance();
  TableMetaData_IndexMetadata::default_instance_->InitAsDefaultInstance();
  TableMetaData_IndexMetadata_KeyInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TableMetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TableMetadata_2eproto {
  StaticDescriptorInitializer_TableMetadata_2eproto() {
    protobuf_AddDesc_TableMetadata_2eproto();
  }
} static_descriptor_initializer_TableMetadata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TableMetaData_AttributeDescription::kNameFieldNumber;
const int TableMetaData_AttributeDescription::kTypeNameFieldNumber;
const int TableMetaData_AttributeDescription::kSizeFieldNumber;
#endif  // !_MSC_VER

TableMetaData_AttributeDescription::TableMetaData_AttributeDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableMetaData_AttributeDescription::InitAsDefaultInstance() {
}

TableMetaData_AttributeDescription::TableMetaData_AttributeDescription(const TableMetaData_AttributeDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableMetaData_AttributeDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_name_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMetaData_AttributeDescription::~TableMetaData_AttributeDescription() {
  SharedDtor();
}

void TableMetaData_AttributeDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableMetaData_AttributeDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableMetaData_AttributeDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMetaData_AttributeDescription_descriptor_;
}

const TableMetaData_AttributeDescription& TableMetaData_AttributeDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableMetadata_2eproto();  return *default_instance_;
}

TableMetaData_AttributeDescription* TableMetaData_AttributeDescription::default_instance_ = NULL;

TableMetaData_AttributeDescription* TableMetaData_AttributeDescription::New() const {
  return new TableMetaData_AttributeDescription;
}

void TableMetaData_AttributeDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_name_ = 0;
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMetaData_AttributeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_name;
        break;
      }
      
      // required int32 type_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_name_)));
          set_has_type_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableMetaData_AttributeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_name(), output);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableMetaData_AttributeDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 type_name = 2;
  if (has_type_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_name(), target);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableMetaData_AttributeDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type_name = 2;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_name());
    }
    
    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableMetaData_AttributeDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMetaData_AttributeDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMetaData_AttributeDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMetaData_AttributeDescription::MergeFrom(const TableMetaData_AttributeDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMetaData_AttributeDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMetaData_AttributeDescription::CopyFrom(const TableMetaData_AttributeDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMetaData_AttributeDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TableMetaData_AttributeDescription::Swap(TableMetaData_AttributeDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_name_, other->type_name_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMetaData_AttributeDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMetaData_AttributeDescription_descriptor_;
  metadata.reflection = TableMetaData_AttributeDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableMetaData_IndexMetadata_KeyInfo::kNameFieldNumber;
const int TableMetaData_IndexMetadata_KeyInfo::kAscFieldNumber;
#endif  // !_MSC_VER

TableMetaData_IndexMetadata_KeyInfo::TableMetaData_IndexMetadata_KeyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableMetaData_IndexMetadata_KeyInfo::InitAsDefaultInstance() {
}

TableMetaData_IndexMetadata_KeyInfo::TableMetaData_IndexMetadata_KeyInfo(const TableMetaData_IndexMetadata_KeyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableMetaData_IndexMetadata_KeyInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  asc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMetaData_IndexMetadata_KeyInfo::~TableMetaData_IndexMetadata_KeyInfo() {
  SharedDtor();
}

void TableMetaData_IndexMetadata_KeyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableMetaData_IndexMetadata_KeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableMetaData_IndexMetadata_KeyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMetaData_IndexMetadata_KeyInfo_descriptor_;
}

const TableMetaData_IndexMetadata_KeyInfo& TableMetaData_IndexMetadata_KeyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableMetadata_2eproto();  return *default_instance_;
}

TableMetaData_IndexMetadata_KeyInfo* TableMetaData_IndexMetadata_KeyInfo::default_instance_ = NULL;

TableMetaData_IndexMetadata_KeyInfo* TableMetaData_IndexMetadata_KeyInfo::New() const {
  return new TableMetaData_IndexMetadata_KeyInfo;
}

void TableMetaData_IndexMetadata_KeyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    asc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMetaData_IndexMetadata_KeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_asc;
        break;
      }
      
      // required bool asc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asc_)));
          set_has_asc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableMetaData_IndexMetadata_KeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bool asc = 2;
  if (has_asc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->asc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableMetaData_IndexMetadata_KeyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bool asc = 2;
  if (has_asc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->asc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableMetaData_IndexMetadata_KeyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool asc = 2;
    if (has_asc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableMetaData_IndexMetadata_KeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMetaData_IndexMetadata_KeyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMetaData_IndexMetadata_KeyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMetaData_IndexMetadata_KeyInfo::MergeFrom(const TableMetaData_IndexMetadata_KeyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_asc()) {
      set_asc(from.asc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMetaData_IndexMetadata_KeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMetaData_IndexMetadata_KeyInfo::CopyFrom(const TableMetaData_IndexMetadata_KeyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMetaData_IndexMetadata_KeyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TableMetaData_IndexMetadata_KeyInfo::Swap(TableMetaData_IndexMetadata_KeyInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(asc_, other->asc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMetaData_IndexMetadata_KeyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMetaData_IndexMetadata_KeyInfo_descriptor_;
  metadata.reflection = TableMetaData_IndexMetadata_KeyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableMetaData_IndexMetadata::kNameFieldNumber;
const int TableMetaData_IndexMetadata::kTypeFieldNumber;
const int TableMetaData_IndexMetadata::kUniqueFieldNumber;
const int TableMetaData_IndexMetadata::kKeysFieldNumber;
#endif  // !_MSC_VER

TableMetaData_IndexMetadata::TableMetaData_IndexMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableMetaData_IndexMetadata::InitAsDefaultInstance() {
}

TableMetaData_IndexMetadata::TableMetaData_IndexMetadata(const TableMetaData_IndexMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableMetaData_IndexMetadata::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  unique_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMetaData_IndexMetadata::~TableMetaData_IndexMetadata() {
  SharedDtor();
}

void TableMetaData_IndexMetadata::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableMetaData_IndexMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableMetaData_IndexMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMetaData_IndexMetadata_descriptor_;
}

const TableMetaData_IndexMetadata& TableMetaData_IndexMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableMetadata_2eproto();  return *default_instance_;
}

TableMetaData_IndexMetadata* TableMetaData_IndexMetadata::default_instance_ = NULL;

TableMetaData_IndexMetadata* TableMetaData_IndexMetadata::New() const {
  return new TableMetaData_IndexMetadata;
}

void TableMetaData_IndexMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    unique_ = false;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMetaData_IndexMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unique;
        break;
      }
      
      // required bool unique = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
          set_has_unique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        break;
      }
      
      // repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableMetaData_IndexMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required bool unique = 3;
  if (has_unique()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unique(), output);
  }
  
  // repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableMetaData_IndexMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required bool unique = 3;
  if (has_unique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unique(), target);
  }
  
  // repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableMetaData_IndexMetadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required bool unique = 3;
    if (has_unique()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .TableMetaData.IndexMetadata.KeyInfo keys = 4;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableMetaData_IndexMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMetaData_IndexMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMetaData_IndexMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMetaData_IndexMetadata::MergeFrom(const TableMetaData_IndexMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unique()) {
      set_unique(from.unique());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMetaData_IndexMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMetaData_IndexMetadata::CopyFrom(const TableMetaData_IndexMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMetaData_IndexMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < keys_size(); i++) {
    if (!this->keys(i).IsInitialized()) return false;
  }
  return true;
}

void TableMetaData_IndexMetadata::Swap(TableMetaData_IndexMetadata* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(unique_, other->unique_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMetaData_IndexMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMetaData_IndexMetadata_descriptor_;
  metadata.reflection = TableMetaData_IndexMetadata_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableMetaData::kNameFieldNumber;
const int TableMetaData::kRecordSizeFieldNumber;
const int TableMetaData::kSpaceForBitMaskFieldNumber;
const int TableMetaData::kRecordsPerPageFieldNumber;
const int TableMetaData::kAttributeFieldNumber;
const int TableMetaData::kIndicesFieldNumber;
#endif  // !_MSC_VER

TableMetaData::TableMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableMetaData::InitAsDefaultInstance() {
}

TableMetaData::TableMetaData(const TableMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableMetaData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_size_ = 0;
  space_for_bit_mask_ = 0;
  records_per_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMetaData::~TableMetaData() {
  SharedDtor();
}

void TableMetaData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TableMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMetaData_descriptor_;
}

const TableMetaData& TableMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableMetadata_2eproto();  return *default_instance_;
}

TableMetaData* TableMetaData::default_instance_ = NULL;

TableMetaData* TableMetaData::New() const {
  return new TableMetaData;
}

void TableMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    record_size_ = 0;
    space_for_bit_mask_ = 0;
    records_per_page_ = 0;
  }
  attribute_.Clear();
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }
      
      // repeated .TableMetaData.AttributeDescription attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(26)) goto parse_indices;
        break;
      }
      
      // repeated .TableMetaData.IndexMetadata indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_indices;
        if (input->ExpectTag(32)) goto parse_record_size;
        break;
      }
      
      // required int32 record_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_size_)));
          set_has_record_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_space_for_bit_mask;
        break;
      }
      
      // required int32 space_for_bit_mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_for_bit_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_for_bit_mask_)));
          set_has_space_for_bit_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_records_per_page;
        break;
      }
      
      // required int32 records_per_page = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &records_per_page_)));
          set_has_records_per_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .TableMetaData.AttributeDescription attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }
  
  // repeated .TableMetaData.IndexMetadata indices = 3;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->indices(i), output);
  }
  
  // required int32 record_size = 4;
  if (has_record_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->record_size(), output);
  }
  
  // required int32 space_for_bit_mask = 5;
  if (has_space_for_bit_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->space_for_bit_mask(), output);
  }
  
  // required int32 records_per_page = 6;
  if (has_records_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->records_per_page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .TableMetaData.AttributeDescription attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }
  
  // repeated .TableMetaData.IndexMetadata indices = 3;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->indices(i), target);
  }
  
  // required int32 record_size = 4;
  if (has_record_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->record_size(), target);
  }
  
  // required int32 space_for_bit_mask = 5;
  if (has_space_for_bit_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->space_for_bit_mask(), target);
  }
  
  // required int32 records_per_page = 6;
  if (has_records_per_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->records_per_page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableMetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 record_size = 4;
    if (has_record_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_size());
    }
    
    // required int32 space_for_bit_mask = 5;
    if (has_space_for_bit_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_for_bit_mask());
    }
    
    // required int32 records_per_page = 6;
    if (has_records_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->records_per_page());
    }
    
  }
  // repeated .TableMetaData.AttributeDescription attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .TableMetaData.IndexMetadata indices = 3;
  total_size += 1 * this->indices_size();
  for (int i = 0; i < this->indices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMetaData::MergeFrom(const TableMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  indices_.MergeFrom(from.indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_record_size()) {
      set_record_size(from.record_size());
    }
    if (from.has_space_for_bit_mask()) {
      set_space_for_bit_mask(from.space_for_bit_mask());
    }
    if (from.has_records_per_page()) {
      set_records_per_page(from.records_per_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMetaData::CopyFrom(const TableMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < indices_size(); i++) {
    if (!this->indices(i).IsInitialized()) return false;
  }
  return true;
}

void TableMetaData::Swap(TableMetaData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(record_size_, other->record_size_);
    std::swap(space_for_bit_mask_, other->space_for_bit_mask_);
    std::swap(records_per_page_, other->records_per_page_);
    attribute_.Swap(&other->attribute_);
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMetaData_descriptor_;
  metadata.reflection = TableMetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
